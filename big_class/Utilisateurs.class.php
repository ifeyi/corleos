<?php

/**
 * Utilisateurs
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    epharma
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Utilisateurs
{
	protected $erreur=array(),
			  $_idutilisateurs,
			  $_nom,
			  $_prenom,
			  $_photo,
			  $_email,
			  $_question,
			  $_reponse,
			  $_existence,
			  $_naissance,
			  $_motpass,
			  $_region,
			  $_ville,
			  $_commune,
			  $_pseudo,
			  $_pays,
			  $_secteuractivite;
	
	
	const  NOM_INVALIDE=1;
	const  PRENOM_INVALIDE=2;
	const  PHOTO_INVALIDE=3;
	const  EMAIL_INVALIDE=4;
	const  QUESTION_INVALIDE=5;
	const  REPONSE_INVALIDE=6;
	const  EXISTENCE_INVALIDE=7;
	const  MOTPASS_INVALIDE=8;
	const  SECTEURACTIVITE_INVALIDE=9;
	const  PSEUDO_INVALIDE=10;
	const  PAYS_INVALIDE=11;
	
	public function __construct($valeur=array())
	{
		if(!empty($valeur))
		{
			$this->hydrate($valeur);
		}
	}
	
	public function hydrate($donnees)
	{
		foreach($donnees as $attribut => $valeur)
		{
			$methode= 'set'.ucfirst($attribut);
			if (is_callable(array($this, $methode)))
			{
				$this->$methode($valeur);
			}
		}
	}
	
	public function isNew()
	{
		return empty($this->_idutilisateurs);
	}
	
	public function isValid()
	{
		return !(empty($this->_nom)||empty($this->_prenom)||empty($this->_email)||empty($this->_question)||empty($this->_reponse)||empty($this->_existence)||empty($this->_motpass)||empty($this->_naissance));	
	}
	
	//LISTE DES SETTERS
	
	public function setIdutilisateurs($idutilisateurs)
	{
		$this->_idutilisateurs=(int)strip_tags($idutilisateurs);
	}
	
	public function setPays($pays)
	{
			$this->_pays=(int)striptags($pays);
		
	}
	
	public function setNom($nom)
	{
		if(is_string($nom)&&strlen($nom)<=30)
		{
			$this->_nom=(string)strip_tags($nom);
			
		}
		else
		{
			$this->erreur[]=self::NOM_INVALIDE;
		}
	}
	
	public function setPrenom($prenom)
	{
		if(is_string($prenom)&&strlen($prenom)<=30)
		{
			$this->_prenom=(string)strip_tags($prenom);
			
		}
		else
		{
			$this->erreur[]=self::PRENOM_INVALIDE;
		}
	}
	
	public function setPhoto($photo)
	{
		if(is_string($photo)&&!empty($photo)&&strlen($photo)<=30)
		{
			$this->_photo=(string)$photo;
		}
		else
		{
			$this->erreur[]=self::PHOTO_INVALIDE;
		}
	}
	
	public function setEmail($email)
	{
		if(is_string($email)&&pregmatch("#^[a-z0-9._-]+@[a-z0-9._-]{2,}\.[a-z]{2,4}$#", $email))
		{
			$this->_email=(string)strip_tags($email);
		}
		else
		{
			$this->erreur[]=self::EMAIL_INVALIDE;
		}
	}
	
	public function setQuestion($question)
	{
		if(is_string($question)&&!empty($question))
		{
			$this->_question=(string)strip_tags($question);
		}
		else
		{
			$this->erreur[]=QUESTION_INVALIDE;
		}
	}
	
	public function setReponse($reponse)
	{
		if(is_string($reponse)&&!empty($reponse))
		{
			$this->_reponse=(string)strip_tags($reponse);
		}
		else
		{
			$this->erreur[]=REPONSE_INVALIDE;
		}
	}
	
	public function setExistence($existence)
	{
		if(is_string($existence)&& strlen($existence)==1)
		{
			$this->_existence=(string)strip_tags($existence);
		}
		else
		{
			$this->erreur[]=self::EXISTENCE_INVALIDE;
		}
	}
	
	public function setNaissance($naissance)
	{
		if(is_string($naissance)&& preg_match('`le [0-9]{2}/[0-9]{2}/[0-9]{4}`', $naissance))
		{
			$this->_naissance=strip_tags($naissance);
		}
	}
	
	public function setMotpass()
	{
		if(is_string($motpass)&& !empty($motpass))
		{
			$this->_motpass=(string)strip_tags($motpass);
		}
		else
		{
			$this->erreur[]=self::MOTPASS_INVALIDE;
		}
	}
	
	public function setVille($ville)
	{
		
		$this->_ville=(string)strip_tags($ville);
	}
	
	public function setRegion($region)
	{
		$this->_region=(string)strip_tags($region);
	}
	
	public function setCommune($commune)
	{
		$this->_commune=(string)strip_tags($commune);
	}
	
	public function setSecteuractivite($secteur)
	{
		if(is_string($secteur)&&!empty($secteur))
		{
			$this->_secteuractivite=(string)strip_tags($secteur);
		}
		else
		{
			$this->erreur[]=self::SECTEURACTIVITE_INVALIDE;
		}
		
	}
	
	public function setPseudo($pseudo)
	{
		if(is_string($pseudo)&&strlen($pseudo)<=30&&!empty($pseudo))
		{
			$this->_pseudo=(string)strip_tags($pseudo);
		}
		else
		{
			$this->erreur[]=self::PSEUDO_INVALIDE;
		}
	}
	
	//LISTE DES GETTERS 
	public function ville()
	{
		return $this->_ville;
	}
	
	public function pays()
	{
		return $this->_pays;
	}
	
	public function region()
	{
		return $this->_region;
	}
	
	public function commune()
	{
		return $this->_commune;
	}
	
	public function secteuractivite()
	{
		return $this->_secteuractivite;	
	}
	
	public function pseudo()
	{
		return $this->_pseudo;
	}
	
	public function idutilisateurs()
	{
		return $this->idutilisateurs;
	}
	
	public function nom()
	{
		return $this->_nom;
	}
	
	public function prenom()
	{
		return $this->_prenom;
	}
	
	public function photo()
	{
		return $this->_photo;
	}
	
	public function email()
	{
		return $this->_email;
	}
	
	public function question()
	{
		return $this->_question;
	}
	
	public function reponse()
	{
		return $this->_reponse;
	}
	
	public function existence()
	{
		return $this->_existence();
	}
	
	public function naissance()
	{
		return $this->_naissance;
	}
	
	public function motpass()
	{
		return $this->_motpass;
	}
	
	public function erreur()
	{
		return $this->_erreur;
	}
}